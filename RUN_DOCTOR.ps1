Param(
  [string]$BackendUrl   = "https://localhost:9000",
  [string]$FrontUrl     = "https://localhost:3000",
  [string]$ManifestPath = "C:\Users\Ludmila\contract_ai\word_addin_dev\manifest.xml",
  # üîπ —Ç—É—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: taskpane.html –ª–µ–∂–∏—Ç—å —É –∫–æ—Ä–µ–Ω—ñ word_addin_dev, –∞ –Ω–µ –≤ dist
  [string]$WebrootPath  = "C:\Users\Ludmila\contract_ai\word_addin_dev",
  [string]$AppPath      = "C:\Users\Ludmila\contract_ai\api\app.py",
  [string]$OutPrefix    = "$PSScriptRoot\report\doctor_report"
)

$ErrorActionPreference = "Stop"

# Better Cyrillic/UTF-8 in console
try { [Console]::OutputEncoding = [Text.UTF8Encoding]::new($false) } catch {}
try { [Console]::InputEncoding  = [Text.UTF8Encoding]::new($false) } catch {}

function Write-Info($msg){ Write-Host "[INFO] $msg" -ForegroundColor Cyan }
function Write-Ok($msg){ Write-Host "[OK] $msg" -ForegroundColor Green }
function Write-Warn($msg){ Write-Warning $msg }
function Write-Fail($msg){ Write-Host "[FAIL] $msg" -ForegroundColor Red }

# Ensure report dir
$reportDir = Split-Path -Parent $OutPrefix
if (-not (Test-Path $reportDir)) { New-Item -Path $reportDir -ItemType Directory | Out-Null }

# Timestamp
$ts = Get-Date -Format "yyyyMMdd-HHmmss"
$OutPrefixFinal = "$OutPrefix-$ts"
$ConsoleLog = "$OutPrefixFinal.console.log"

# Start transcript (console log)
try { Start-Transcript -Path $ConsoleLog -Force | Out-Null } catch {}

# ExecutionPolicy tip (only current process)
if ($env:PSExecutionPolicyPreference -ne "Bypass") {
  Write-Info "ExecutionPolicy (process): setting to Bypass for this run."
  Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
}

# Locate Python
$PythonCmd = $null
$PythonArgsPrefix = @()
if (Get-Command python -ErrorAction SilentlyContinue) {
  $PythonCmd = "python"
} elseif (Get-Command py -ErrorAction SilentlyContinue) {
  $PythonCmd = "py"
  $PythonArgsPrefix = @("-3")
} else {
  Write-Fail "Python –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É PATH. –í—Å—Ç–∞–Ω–æ–≤–∏ Python 3 —ñ —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É."
  try { Stop-Transcript | Out-Null } catch {}
  Read-Host "–ù–∞—Ç–∏—Å–Ω–∏ Enter, —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ"
  exit 1
}
Write-Info "Python: $PythonCmd $($PythonArgsPrefix -join ' ')"

# Verify 'requests' (–¥–ª—è live API –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫)
try {
  $res = & $PythonCmd @($PythonArgsPrefix) -c "import importlib.util as u; import sys; print('ok' if u.find_spec('requests') else 'miss')"
  if ($res -ne "ok") {
    Write-Info "–í—Å—Ç–∞–Ω–æ–≤–ª—é—é 'requests' (pip --user)‚Ä¶"
    & $PythonCmd @($PythonArgsPrefix) -m pip install --user requests | Out-Host
  }
} catch {
  Write-Warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏/–≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ 'requests'. –ü—Ä–æ–¥–æ–≤–∂—É—é –±–µ–∑ live API –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫."
}

# Resolve doctor script
$Doctor = Join-Path $PSScriptRoot "contract_ai_doctor.py"
if (-not (Test-Path $Doctor)) {
  Write-Fail "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ $Doctor. –ü–æ–∫–ª–∞–¥–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—Ä—è–¥ —ñ–∑ RUN_DOCTOR.ps1"
  try { Stop-Transcript | Out-Null } catch {}
  Read-Host "–ù–∞—Ç–∏—Å–Ω–∏ Enter, —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ"
  exit 1
}

# Echo config
Write-Info "Backend  = $BackendUrl"
Write-Info "Frontend = $FrontUrl"
Write-Info "Manifest = $ManifestPath"
Write-Info "Webroot  = $WebrootPath"
Write-Info "App      = $AppPath"
Write-Info "Out      = $OutPrefixFinal"

# Run doctor
$argsList = @($Doctor, "--backend", $BackendUrl, "--front", $FrontUrl,
              "--manifest", $ManifestPath, "--webroot", $WebrootPath,
              "--app", $AppPath, "--out", $OutPrefixFinal)

try {
  & $PythonCmd @($PythonArgsPrefix + $argsList) | Out-Host
} catch {
  Write-Fail "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É doctor: $($_.Exception.Message)"
  try { Stop-Transcript | Out-Null } catch {}
  Read-Host "–ù–∞—Ç–∏—Å–Ω–∏ Enter, —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ"
  exit 1
}

# Open report
$md = "$OutPrefixFinal.md"
$json = "$OutPrefixFinal.json"
if (Test-Path $md) {
  Write-Ok "–ó–≤—ñ—Ç: $md"
  try { Start-Process $md } catch { Write-Warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ ${md}: $($_.Exception.Message)" }
} else {
  Write-Warn "Markdown-–∑–≤—ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
}
if (Test-Path $json) {
  Write-Info "JSON: $json"
}

try { Stop-Transcript | Out-Null } catch {}

# Keep window open when launched via context menu
Read-Host "–ù–∞—Ç–∏—Å–Ω–∏ Enter, —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ"
