from __future__ import annotations

"""Demo entry point for Contract AI rule analysis."""

import os
import sys

from contract_review_app.core.schemas import AnalysisInput
from contract_review_app.generate_report import generate_report
from contract_review_app.legal_rules.legal_rules import analyze as run_rule
from contract_review_app.legal_rules.registry import RULES_REGISTRY
from contract_review_app.utils.logging import init_logging

# —Å–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –∑—Ä—É—á–Ω–∏–π –ª–æ–∞–¥–µ—Ä DOCX, —è–∫—â–æ —î
try:
    from contract_review_app.core.load_docx_text import load_docx_text
except Exception:
    load_docx_text = None  # –≤–ø–∞–¥–µ–º–æ –Ω–∞ fallback

logger = init_logging()

DEMO_TEXT = """\
THIS SAMPLE CONTRACT (demo) ‚Äî minimal text to let rules run.
Termination: either party may terminate for material breach with 30 days' written notice and a cure period.
Confidentiality: each Party shall keep Confidential Information secret; carve-outs include information required by law.
Governing law: laws of England and Wales. Jurisdiction: courts of England have exclusive jurisdiction.
Force Majeure: epidemic, war, governmental order; notice within 10 days; reasonable efforts to mitigate; terminate after 90 days.
Indemnity: Supplier shall indemnify Customer against losses, claims, costs and expenses; subject to the limitation of liability set out herein.
"""


def load_contract_text() -> str:
    """
    1) ./sample_contract.docx
    2) ./sample_contract.txt
    3) DEMO_TEXT (–≤—à–∏—Ç–∏–π)
    """
    docx_path = os.path.abspath("sample_contract.docx")
    txt_path = os.path.abspath("sample_contract.txt")

    # DOCX
    if load_docx_text and os.path.exists(docx_path):
        try:
            logger.info("üìÑ Loading DOCX: {}", docx_path)
            return load_docx_text(docx_path)
        except Exception as e:
            logger.warning("‚ö† DOCX loader failed: {}", e)

    # TXT
    if os.path.exists(txt_path):
        try:
            logger.info("üìÑ Loading TXT: {}", txt_path)
            with open(txt_path, "r", encoding="utf-8", errors="ignore") as f:
                return f.read()
        except Exception as e:
            logger.warning("‚ö† TXT loader failed: {}", e)

    logger.warning("‚ö† sample_contract.* not found ‚Äî using built-in demo text.")
    return DEMO_TEXT


def main():
    print("üì¶ RULES_REGISTRY contains:", list(RULES_REGISTRY.keys()))
    contract_text = load_contract_text()

    # –ì–æ—Ç—É—î–º–æ —ñ–Ω–ø—É—Ç–∏ –¥–ª—è –í–°–Ü–• –ø—Ä–∞–≤–∏–ª –±—ñ–∑–Ω–µ—Å-—Ä—ñ–≤–Ω—è (—É—Å—ñ –∫–ª—é—á—ñ –∑ —Ä–µ—î—Å—Ç—Ä—É)
    inputs = [
        AnalysisInput(
            clause_type=rule_name, text=contract_text, metadata={"name": rule_name}
        )
        for rule_name in RULES_REGISTRY.keys()
    ]

    # –ü—Ä–æ–≥–∞–Ω—è—î–º–æ –∫–æ–∂–Ω–µ –ø—Ä–∞–≤–∏–ª–æ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    results = []
    print("üîç Running analysis for", len(inputs), "clauses...")
    for inp in inputs:
        try:
            out = run_rule(inp)  # legal_rules.legal_rules.analyze
            results.append(out)
            print(
                f"  ‚úî {inp.clause_type}: {out.status} (score={getattr(out, 'score', '?')})"
            )
        except Exception:
            # –ë–µ–∑–ø–µ—á–Ω–æ —Ñ—ñ–∫—Å—É—î–º–æ –∑–±—ñ–π –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞, —â–æ–± —ñ–Ω—à—ñ –Ω–µ –ø–æ—Å—Ç—Ä–∞–∂–¥–∞–ª–∏
            logger.exception("Rule '{rule}' crashed; continuing‚Ä¶", rule=inp.clause_type)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
    out_file = os.path.abspath("report.html")
    try:
        generate_report(results, output_file=out_file)  # –£–í–ê–ì–ê: —Ç—É—Ç —Å–∞–º–µ output_file
        print(f"‚úÖ Report generated: {out_file}")
        # –î–ª—è Windows –º–æ–∂–Ω–∞ –æ–¥—Ä–∞–∑—É –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ:
        try:
            import webbrowser

            webbrowser.open(f"file:///{out_file}")
        except Exception:
            pass
    except TypeError as e:
        # –ü—ñ–¥–∫–∞–∑–∫–∞ —è–∫—â–æ –∑–Ω–æ–≤—É —Å–ø–ª—É—Ç–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä
        if "output_path" in str(e):
            print(
                "‚ùå generate_report() –Ω–µ –ø—Ä–∏–π–º–∞—î 'output_path'. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π 'output_file'."
            )
        raise


if __name__ == "__main__":
    # –î–æ–¥–∞–º–æ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ—î–∫—Ç—É –≤ PYTHONPATH –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∑–∞–ø—É—Å–∫—É –ø–æ–∑–∞ venv
    sys.path.append(os.path.abspath("."))
    main()
